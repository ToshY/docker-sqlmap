name: Release sqlmap docker image

on:
  schedule:
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      SQLMAP_VERSION:
        description: 'Version sqlmap'
        required: false
      FORCE:
        type: choice
        description: 'Force recreate image'
        required: false
        default: 'false'
        options:
          - 'true'
          - 'false'

env:
  REGISTRY_IMAGE: toshy/docker-sqlmap
  GHCR_SLUG: ghcr.io/toshy/docker-sqlmap

jobs:
  check:
    name: Check sqlmap version
    runs-on: ubuntu-latest
    outputs:
      IMAGE_EXISTS: ${{ steps.check_image.outputs.IMAGE_EXISTS }}
      SQLMAP_VERSION: ${{ steps.check_image.outputs.LATEST_SQLMAP_VERSION }}
    steps:
      - name: Check latest SQLmap release
        id: sqlmap_tag
        run: |
          SQLMAP_TAG=$(curl -s https://github.com/sqlmapproject/sqlmap/tags | grep '/sqlmap/archive/refs/tags/' | grep '.tar.gz' | head -n 1 | sed -n 's/.*refs\/tags\/\(.*\)\.tar\.gz".*/\1/p')
          echo "Latest sqlmap tag: $SQLMAP_TAG"
          echo "LATEST_SQLMAP_VERSION=$SQLMAP_TAG" >> $GITHUB_ENV

      - name: Check if a new image is needed
        id: check_image
        run: |
          if [ ! -z "${{ github.event.inputs.SQLMAP_VERSION }}" ]; then
            echo "Input 'SQLMAP_VERSION' is set to '${{ github.event.inputs.SQLMAP_VERSION }}'."
            echo "LATEST_SQLMAP_VERSION=${{ github.event.inputs.SQLMAP_VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "Input 'SQLMAP_VERSION' is empty or not provided. Defaulting to '${{ env.LATEST_SQLMAP_VERSION }}'."
            echo "LATEST_SQLMAP_VERSION=${{ env.LATEST_SQLMAP_VERSION }}" >> $GITHUB_OUTPUT
          fi

          echo "Checking if image with tag ${{ env.LATEST_SQLMAP_VERSION }} exists on GHCR."

          ENCODED_TOKEN=$(echo -n "${{ secrets.GITHUB_TOKEN }}" | base64)
          RESPONSE=$(curl -s -H "Authorization: Bearer ${ENCODED_TOKEN}" https://ghcr.io/v2/${{ env.REGISTRY_IMAGE }}/tags/list)

          echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
          if echo "$RESPONSE" | jq -e '.tags' >/dev/null 2>&1; then
            TAG_EXISTS=$(echo "$RESPONSE" | jq -r --arg TAG "${{ env.LATEST_SQLMAP_VERSION }}" '.tags[] | select(. == $TAG)')
            if [[ -n "$TAG_EXISTS" ]]; then
              if [ "${{ github.event.inputs.FORCE }}" == "true" ]; then
                echo "Image with tag ${{ env.LATEST_SQLMAP_VERSION }} already exists. Force build step."
              else
                echo "Image with tag ${{ env.LATEST_SQLMAP_VERSION }} already exists. Skip build step."
                echo "IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "Image with tag ${{ env.LATEST_SQLMAP_VERSION }} not found. Proceed build step."
            fi
          else
            echo "No current tags found. Response: $RESPONSE. Proceed build step."
          fi

  prepare:
    name: Prepare bake definition
    runs-on: ubuntu-latest
    needs:
      - check
    if: ${{ needs.check.outputs.IMAGE_EXISTS == 'false' }}
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake image-all --print | jq -cr '.target."image-all".platforms')" >>${GITHUB_OUTPUT}          

      - name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}          

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=latest,enable=true
            type=raw,value=${{ needs.check.outputs.SQLMAP_VERSION }}
          labels: |
            org.opencontainers.image.vendor=ToshY

      - name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "/tmp/bake-meta.json"          

      - name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta
          path: /tmp/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    name: Build image
    needs:
      - check
      - prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: /tmp

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        id: bake
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            /tmp/bake-meta.json
          targets: image
          set: |
            *.args.SQLMAP_VERSION=${{ needs.check.outputs.SQLMAP_VERSION }}
            *.tags=
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=build-${{ env.PLATFORM_PAIR }}
            *.cache-to=type=gha,scope=build-${{ env.PLATFORM_PAIR }}
            *.output=type=image,"name=${{ env.GHCR_SLUG  }}",push-by-digest=true,name-canonical=true,push=true            

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "/tmp/digests/${digest#sha256:}"          

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Push image
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta
          path: /tmp

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.GHCR_SLUG }}")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            $(printf '${{ env.GHCR_SLUG }}@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.GHCR_SLUG }}:$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' /tmp/bake-meta.json)    
